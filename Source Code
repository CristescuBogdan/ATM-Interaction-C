#include <mega164.h>
#include <delay.h>
//unsigned int delayTime = 50/; // Delay time in milliseconds (1 second)
   // Number of seconds to turn LED on and off
int x =15000; 
char S; // starea PS
char Q; // starea CLS
//char flag=0; // flag = 0 – sistem inactiv, flag=1 – sistem activ
//char eroare=1; // eroare = 0 – eroare introducere parola
char in; // intrarea SW7-SW0
char out; // iesirea CLC
// tabela de adevar a CLC
char TAB[16]={
0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFE,
0xFF,0xFF,0xFF,0xFD,
0xFF,0xFB,0xF7,0xFF
};
char *TAB1[81]; //tabela de adrese
// tabelele de semnale relevante
char A0[] = {7, 1, 16, 0}; // ID rezidenta
char A1[] = {3, 2, 16, 1}; // ID banca
char A2[] = {9, 3, 16, 2}; // ID client
char A3[] = {1, 80, 16, 3}; // prima cifra din PIN
char A4[] = {5, 5, 16, 4}; // a doua cifra din PIN
char A5[] = {0, 6, 16, 5}; // a treia cifra din PIN
char A6[] = {8, 7, 16, 6}; // a patra cifra din PIN
char A7[] = {4, 80, 16, 7};
char A8[] = {2, 9, 16, 8};
char A9[] = {6, 10, 16, 9};
char A10[] = {1, 11, 16, 10};
char A11[] = {7, 80, 16, 11};
char A12[] = {3, 13, 16, 12};
char A13[] = {9, 14, 16, 13};
char A14[] = {1, 15, 16, 14};
char A15[] = {5, 80, 16, 15};
char A16[] = {0, 17, 16, 16};
char A17[] = {8, 18, 16, 17};
char A18[] = {1, 19, 16, 18};
char A19[] = {2, 80, 16, 19};
char A20[] = {4, 21, 16, 20};
char A21[] = {6, 22, 16, 21};
char A22[] = {1, 23, 16, 22};
char A23[] = {7, 80, 16, 23};
char A24[] = {3, 25, 16, 24};
char A25[] = {9, 26, 16, 25};
char A26[] = {1, 27, 16, 26};
char A27[] = {5, 80, 16, 27};
char A28[] = {0, 29, 16, 28};
char A29[] = {8, 30, 16, 29};
char A30[] = {1, 31, 16, 30};
char A31[] = {2, 80, 16, 31};
char A32[] = {4, 33, 16, 32};
char A33[] = {6, 34, 16, 33};
char A34[] = {1, 35, 16, 34};
char A35[] = {7, 80, 16, 35};
char A36[] = {3, 37, 16, 36};
char A37[] = {9, 38, 16, 37};
char A38[] = {1, 39, 16, 38};
char A39[] = {5, 80, 16, 39};
char A40[] = {0, 41, 16, 40};
char A41[] = {8, 42, 16, 41};
char A42[] = {1, 43, 16, 42};
char A43[] = {2, 80, 16, 43};
char A44[] = {4, 45, 16, 44};
char A45[] = {6, 46, 16, 45};
char A46[] = {1, 47, 16, 46};
char A47[] = {7,80, 16, 47};
char A48[] = {3, 49, 16, 48};
char A49[] = {9, 50, 16, 49};
char A50[] = {1, 51, 16, 50};
char A51[] = {5, 80, 16, 51};
char A52[] = {0, 53, 16, 52};
char A53[] = {8, 54, 16, 53};
char A54[] = {1, 55, 16, 54};
char A55[] = {2, 80, 16, 55};
char A56[] = {4, 57, 16, 56};
char A57[] = {6, 58, 16, 57};
char A58[] = {1, 59, 16, 58};
char A59[] = {7, 80, 16, 59};
char A60[] = {3, 61, 16, 60};
char A61[] = {9, 62, 16, 61};
char A62[] = {1, 63, 16, 62};
char A63[] = {5, 80, 16, 63};
char A64[] = {0, 65, 16, 64};
char A65[] = {8, 66, 16, 65};
char A66[] = {1, 67, 16, 66};
char A67[] = {2, 80, 16, 67};
char A68[] = {4, 69, 16, 68};
char A69[] = {6, 70, 16, 69};
char A70[] = {1, 71, 16, 70};
char A71[] = {7, 80, 16, 71};
char A72[] = {3, 73, 16, 72};
char A73[] = {9, 74, 16, 73};
char A74[] = {1, 75, 16, 74};
char A75[] = {5, 80, 16, 75};
char A76[] = {0, 77, 16, 76};
char A77[] = {8, 78, 16, 77};
char A78[] = {1, 79, 16, 78};
char A79[] = {2, 80, 16, 79};
char A80[] = {16, 80}; // terminator
// terminator

//flag=0;  
//eroare=1;
//out=(flag << 7) | (eroare << 6) | (0x3F);

void ID(void){
//in=PIND;

    if (in == 0xFF) {
        Q = 0;
    } else if (in == 0xFE) {
        Q = 4;
    } else if (in ==0xFD){
        Q=8;
    }  else if (in ==0xFC){
        Q=12;
    }   else if (in ==0xFB){
        Q=16;
    }   else if (in ==0xFA){
        Q=20;
    }  else if (in ==0xF9){
        Q=24;
    } else if (in ==0xF8){
        Q=28;
    } else if (in ==0xF7){
        Q=32;
    } else if (in ==0xF6){
        Q=36;
    } else if (in ==0xF5){
        Q=40;
    } else if (in ==0xF4){
        Q=44;
    } else if (in ==0xF3){
        Q=48;
    } else if (in ==0xF2){
        Q=52;
    } else if (in ==0xF1){
        Q=56;
    }  else if (in ==0xF0){
        Q=60;
    } else if (in ==0xDF){
        Q=64;
    } else if (in ==0xDE){
        Q=68;
    } else if (in ==0xDD){
        Q=72;
    } else if (in ==0xDC){
        Q=76;
    }
}
void cls(void)
{
char i;
char *adr;
char ready;
adr=TAB1[Q];
i=0;
ready=0;
while (!ready)
{
if (~in==*(adr+i)) {Q=*(adr+i+1); ready=1;}
else if (*(adr+i)==16) ready=1;
else i=i+2;
}
}

void clc(void)
{
char tmp;
tmp=in & 0x0F;
out=TAB[tmp];
}

// Timer 0 overflow interrupt service routine
interrupt [TIM0_OVF] void timer0_ovf_isr(void)
{
// Reinitialize Timer 0 value
TCNT0=0x3C;
// Place your code here
in =PIND;

switch (S)
{
case 0:
S=1;
ID();
break;
case 1:
if (in==0x7F) {S=2;} //SW7
if (in==0xDF) {S=6;} //SW5
break;
case 2:
cls();
if (in==0xBF) {S=3;} //SW6
break;
case 3:
if (Q==80) {
if(in==0xFB){S=4;}
    else if(in==0xF7){S=5;} 
}else{

for (x=30; x > 0; x--) {
if(x>25){
    PORTB = 0x11;}
if(x>20){    
    PORTB = 0x01;}
if(x>15){
    PORTB = 0x11;}
if(x>10){
    PORTB = 0x01;}
if(x>5){
    PORTB=0x11;}
if(x>0){
    PORTB=0x01;}
S=6;
} }
break;
case 4:
if (in==0xFD) { out=0x06;}
else if(in==0xFE){
out=0x01;
S=6;} //SW7
break;
case 5:
if(in==0xFD){out=0x0A;}
else if(in==0xFE){
out=0x01;
S=6;}
case 6:
        S=0;
        out=0x80;
        Q=0;
break;
}
PORTB=out;
}


// Declare your global variables here


void main(void)
{
// Declare your local variables here
TAB1[0]=A0;
TAB1[1]=A1;
TAB1[2]=A2;
TAB1[3]=A3;
TAB1[4]=A4;
TAB1[5]=A5;
TAB1[6]=A6;
TAB1[7]=A7;
TAB1[8] = A8;
TAB1[9] = A9;
TAB1[10] = A10;
TAB1[11] = A11;
TAB1[12] = A12;
TAB1[13] = A13;
TAB1[14] = A14;
TAB1[15] = A15;
TAB1[16] = A16;
TAB1[17] = A17;
TAB1[18] = A18;
TAB1[19] = A19;
TAB1[20] = A20;
TAB1[21] = A21;
TAB1[22] = A22;
TAB1[23] = A23;
TAB1[24] = A24;
TAB1[25] = A25;
TAB1[26] = A26;
TAB1[27] = A27;
TAB1[28] = A28;
TAB1[29] = A29;
TAB1[30] = A30;
TAB1[31] = A31;
TAB1[32] = A32;
TAB1[33] = A33;
TAB1[34] = A34;
TAB1[35] = A35;
TAB1[36] = A36;
TAB1[37] = A37;
TAB1[38] = A38;
TAB1[39] = A39;
TAB1[40] = A40;
TAB1[41] = A41;
TAB1[42] = A42;
TAB1[43] = A43;
TAB1[44] = A44;
TAB1[45] = A45;
TAB1[46] = A46;
TAB1[47] = A47;
TAB1[48] = A48;
TAB1[49] = A49;
TAB1[50] = A50;
TAB1[51] = A51;
TAB1[52] = A52;
TAB1[53] = A53;
TAB1[54] = A54;
TAB1[55] = A55;
TAB1[56] = A56;
TAB1[57] = A57;
TAB1[58] = A58;
TAB1[59] = A59;
TAB1[60] = A60;
TAB1[61] = A61;
TAB1[62] = A62;
TAB1[63] = A63;
TAB1[64] = A64;
TAB1[65] = A65;
TAB1[66] = A66;
TAB1[67] = A67;
TAB1[68] = A68;
TAB1[69] = A69;
TAB1[70] = A70;
TAB1[71] = A71;
TAB1[72] = A72;
TAB1[73] = A73;
TAB1[74] = A74;
TAB1[75] = A75;
TAB1[76] = A76;
TAB1[77] = A77;
TAB1[78] = A78;
TAB1[79] = A79;
TAB1[80] = A80;

S=0;
Q=0;
out=0x00;

// Clock Oscillator division factor: 1
#pragma optsize-
CLKPR=(1<<CLKPCE);
CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
#ifdef _OPTIMIZE_SIZE_
#pragma optsize+
#endif

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port B initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 9.766 kHz
// Mode: Normal top=0xFF
// OC0A output: Disconnected
// OC0B output: Disconnected
// Timer Period: 20.07 ms
TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
TCNT0=0x3C;
OCR0A=0x00;
OCR0B=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2A output: Disconnected
// OC2B output: Disconnected
ASSR=(0<<EXCLK) | (0<<AS2);
TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2A=0x00;
OCR2B=0x00;

// Timer/Counter 0 Interrupt(s) initialization
TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);

// Timer/Counter 1 Interrupt(s) initialization
TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);

// Timer/Counter 2 Interrupt(s) initialization
TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
// Interrupt on any change on pins PCINT0-7: Off
// Interrupt on any change on pins PCINT8-15: Off
// Interrupt on any change on pins PCINT16-23: Off
// Interrupt on any change on pins PCINT24-31: Off
EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);

// USART0 initialization
// USART0 disabled
UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);

// USART1 initialization
// USART1 disabled
UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
ADCSRB=(0<<ACME);
// Digital input buffer on AIN0: On
// Digital input buffer on AIN1: On
DIDR1=(0<<AIN0D) | (0<<AIN1D);

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Globally enable interrupts
#asm("sei")
while(1){
}
}               
